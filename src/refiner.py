# coding=utf-8
#
# refiner.py
# The-Sunflorist.github.io/src/
#
# Created by 向阳花花农(The Sunflorist) on 2024-10-25.
# Copyright © 2024 向阳花花农(The Sunflorist). All rights reserved.
#
# Refine a couple of things generated by Jupyter Book and Furo theme.


import os
import re
import sys
from datetime import datetime
from subprocess import run
from typing import final

from logger_creator import LoggerCreator

logger = LoggerCreator.get_logger(name=os.path.splitext(p=os.path.relpath(path=__file__))[0])


class Replacer:
    """Replace some content that can not be configured by Jupyter Book.
    """

    __now = datetime.now().astimezone()
    __old_and_new: dict[str, tuple[str, str]] = {
        'footer': (
            r'\s*<div class="copyright">(.|\n)*?Furo</a>',
            open(file=os.path.join('aux', 'copyright.html'), mode='r', encoding='utf-8')
            .read().replace('{{year}}', f'{__now.year}')
            .replace('{{date}}', __now.strftime(format='%Y-%m-%d %H:%M:%S UTC %:z')),
        ),
        'previous': (
            r'<span>Previous</span>',
            r'<span><i class="em-svg em-fallen_leaf" aria-role="presentation" aria-label="FALLEN LEAF"></i> 上一叶</span>',
        ),
        'next': (
            r'<span>Next</span>',
            r'<span>下一叶 <i class="em-svg em-leaves" aria-role="presentation" '
            r'aria-label="LEAF FLUTTERING IN WIND"></i></span>',
        ),
        'back_to_top': (r'<span>Back to top</span>', r'<span>返回顶部</span>'),
        'toc_title': (
            r'<span class="toc-title">(.|\n)*?On this page(.|\n)*?</span>',
            r'<span class="toc-title"><i class="em-svg em-cherry_blossom" aria-role="presentation" '
            r'aria-label="CHERRY BLOSSOM"></i> “花名册”</span>',
        ),
        'part1_title': (
            r'<span class="caption-text">“花花世界”</span>',
            r'<span class="caption-text"><i class="em-svg em-sunflower" aria-role="presentation" '
            r'aria-label="SUNFLOWER"></i> “花花世界”</span>',
        ),
        'part2_title': (
            '<span class="caption-text">有心栽花</span>',
            '<span class="caption-text"><i class="em-svg em-two_hearts" aria-role="presentation" '
            'aria-label="TWO HEARTS"></i> 有心栽花</span>',
        ),
        'home': (r'<div class="title">Home</div>', r'<div class="title">向阳花花农的花海</div>'),
    }

    @classmethod
    def replace(cls, filepath_or_folder_path: str, static_folder_path: str = '') -> None:
        if os.path.isdir(s=filepath_or_folder_path):
            for filename in filter(lambda x: not x.startswith('.'), os.listdir(path=filepath_or_folder_path)):
                cls.replace(
                    filepath_or_folder_path=os.path.join(filepath_or_folder_path, filename),
                    static_folder_path=f'../{static_folder_path}' if static_folder_path else '_static',
                )
            return

        if not filepath_or_folder_path.endswith('.html'):
            return

        with open(file=filepath_or_folder_path, mode='r+', encoding='utf-8') as file:
            new_content = file.read()
            for name, (old, new) in cls.__old_and_new.items():
                new_content = re.sub(
                    pattern=old,
                    repl=new.replace('{{static}}', static_folder_path),
                    string=new_content,
                )
            file.seek(0)
            file.truncate()
            file.write(new_content)
        logger.blue(f'Refined {os.path.relpath(path=filepath_or_folder_path)}')


class Linker:
    """Create some symbolic links.
    """

    @staticmethod
    def link(source_folder_path: str, target_folder_path: str, filenames: list[str]) -> None:
        os.makedirs(name=target_folder_path, mode=0o755, exist_ok=True)
        for filename in filenames:
            target_filepath = os.path.abspath(path=os.path.join(target_folder_path, filename))
            if os.path.exists(path=target_filepath):
                logger.yellow(f'{os.path.relpath(path=target_filepath)} already exists')
                continue

            source_filepath = os.path.abspath(path=os.path.join(source_folder_path, filename))
            run(args=['ln', '-s', source_filepath, target_filepath], check=True)
            logger.green(f'Link created: {os.path.relpath(path=target_filepath)}')


class Remover:
    """Remove some files.
    """

    @staticmethod
    def remove(filepaths: list[str]) -> None:
        for filepath in filepaths:
            run(args=['rm', '-rf', filepath], check=True)
            logger.yellow(f'Removed {os.path.relpath(path=filepath)}')


@final
class Main:
    @staticmethod
    def main() -> None:
        # Read the Docs saves html in project/_readthedocs/ folder,
        # while it is saved in project/.tmp/ locally to avoid being uploaded onto iCloud
        html_path = os.path.join('_readthedocs' if 'readthedocs' in sys.path[0] else '.tmp', 'html')

        Replacer.replace(filepath_or_folder_path=html_path)
        Linker.link(source_folder_path='.', target_folder_path=html_path, filenames=['README.md', 'LICENSE'])
        Remover.remove(filepaths=[os.path.join(html_path, '_sources')])


if __name__ == '__main__':
    Main.main()
    logger.newline()
